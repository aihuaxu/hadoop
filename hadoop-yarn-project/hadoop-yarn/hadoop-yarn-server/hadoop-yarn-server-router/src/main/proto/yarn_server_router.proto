/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

option java_package = "org.apache.hadoop.yarn.proto";
option java_outer_classname = "YarnServerRouterProtos";
option java_generic_services = true;
option java_generate_equals_and_hash = true;
package hadoop.yarn;

import "yarn_server_common_protos.proto";
import "yarn_protos.proto";
import "RpcHeader.proto";

////////////////////////////////////////////////////////////////////////
////// Router state store related records /////////////////////////////////////
////////////////////////////////////////////////////////////////////////
message RouterRecordProto {
    optional uint64 dateCreated = 1;
    optional uint64 dateModified = 2;
    optional string address = 3;
    optional string status = 4;
    optional uint64 dateStarted = 5;
}

message RouterHeartbeatRequestProto {
    optional RouterRecordProto router = 1;
}

message RouterHeartbeatResponseProto {
    optional bool status = 1;
}
///////////////////////////////////////
///// Peloton protocol////////////////
/////////////////////////////////////
message PelotonZKConfProto {
    optional string cluster = 1;
    repeated PelotonZKInfoProto zkInfos= 2;
    optional uint64 dateCreated = 3;
    optional uint64 dateModified = 4;
}

message PelotonZKInfoProto {
    optional string zkAddress = 1;
    optional string resourcePoolPath = 2;
    optional string zone = 3;
    optional string region = 4;
    optional uint64 dateCreated = 5;
    optional uint64 dateModified = 6;
}

message GetPelotonZKConfListRequestProto {
}

message GetPelotonZKConfListResponseProto {
    repeated PelotonZKConfProto zkConfs = 1;
}

message SavePelotonZKInfoToClusterRequestProto {
    optional string cluster = 1;
    optional bool isCreate = 2;
    optional PelotonZKInfoProto zkInfo = 3;
}

message SavePelotonZKInfoToClusterResponseProto {
    optional bool status = 1;
    optional string errorMsg = 2;
}

message RemovePelotonZKInfoFromClusterRequestProto {
    optional string cluster = 1;
    optional string zkAddress = 2;
}

message RemovePelotonZKInfoFromClusterResponseProto {
    optional bool status = 1;
    optional string errorMsg = 2;
}

message SavePelotonZKConfRequestProto {
    optional PelotonZKConfProto zkConf = 1;
    optional bool isCreate = 2;
}

message SavePelotonZKConfResponseProto {
    optional bool status = 1;
    optional string errorMsg = 2;
}

message RemovePelotonZKConfByClusterRequestProto {
    optional string cluster = 1;
}

message RemovePelotonZKConfByClusterResponseProto {
    optional bool status = 1;
    optional string errorMsg = 2;
}

message GetPelotonZKInfoListByClusterRequestProto {
    optional string cluster = 1;
}

message GetPelotonZKInfoListByClusterResponseProto {
    repeated PelotonZKInfoProto zkInfos = 1;
}

message ClearAllPelotonZKConfsRequestProto {
}

message ClearAllPelotonZKConfsResponseProto {
    optional bool status = 1;
    optional string errorMsg = 2;
}
